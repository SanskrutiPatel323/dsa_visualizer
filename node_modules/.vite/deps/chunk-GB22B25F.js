import {
  init_unsupportedProp,
  unsupportedProp
} from "./chunk-OLMYG5QG.js";
import {
  ButtonBase_default
} from "./chunk-KMDF7QXW.js";
import {
  capitalize,
  init_capitalize
} from "./chunk-2YBEZ5HY.js";
import {
  init_withStyles,
  withStyles_default
} from "./chunk-GSO242P7.js";
import {
  _defineProperty,
  _extends,
  _objectWithoutProperties,
  clsx_m_default,
  init_clsx_m,
  init_defineProperty,
  init_extends,
  init_objectWithoutProperties
} from "./chunk-XOLRCPL2.js";
import {
  require_prop_types
} from "./chunk-ABXFWZKR.js";
import {
  require_react
} from "./chunk-IXG3QTAX.js";
import {
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@material-ui/core/esm/Tab/Tab.js
init_objectWithoutProperties();
init_defineProperty();
init_extends();
var React = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());
init_clsx_m();
init_withStyles();
init_capitalize();
init_unsupportedProp();
var styles = function styles2(theme) {
  var _extends2;
  return {
    root: _extends({}, theme.typography.button, (_extends2 = {
      maxWidth: 264,
      minWidth: 72,
      position: "relative",
      boxSizing: "border-box",
      minHeight: 48,
      flexShrink: 0,
      padding: "6px 12px"
    }, _defineProperty(_extends2, theme.breakpoints.up("sm"), {
      padding: "6px 24px"
    }), _defineProperty(_extends2, "overflow", "hidden"), _defineProperty(_extends2, "whiteSpace", "normal"), _defineProperty(_extends2, "textAlign", "center"), _defineProperty(_extends2, theme.breakpoints.up("sm"), {
      minWidth: 160
    }), _extends2)),
    labelIcon: {
      minHeight: 72,
      paddingTop: 9,
      "& $wrapper > *:first-child": {
        marginBottom: 6
      }
    },
    textColorInherit: {
      color: "inherit",
      opacity: 0.7,
      "&$selected": {
        opacity: 1
      },
      "&$disabled": {
        opacity: 0.5
      }
    },
    textColorPrimary: {
      color: theme.palette.text.secondary,
      "&$selected": {
        color: theme.palette.primary.main
      },
      "&$disabled": {
        color: theme.palette.text.disabled
      }
    },
    textColorSecondary: {
      color: theme.palette.text.secondary,
      "&$selected": {
        color: theme.palette.secondary.main
      },
      "&$disabled": {
        color: theme.palette.text.disabled
      }
    },
    selected: {},
    disabled: {},
    fullWidth: {
      flexShrink: 1,
      flexGrow: 1,
      flexBasis: 0,
      maxWidth: "none"
    },
    wrapped: {
      fontSize: theme.typography.pxToRem(12),
      lineHeight: 1.5
    },
    wrapper: {
      display: "inline-flex",
      alignItems: "center",
      justifyContent: "center",
      width: "100%",
      flexDirection: "column"
    }
  };
};
var Tab = React.forwardRef(function Tab2(props, ref) {
  var classes = props.classes, className = props.className, _props$disabled = props.disabled, disabled = _props$disabled === void 0 ? false : _props$disabled, _props$disableFocusRi = props.disableFocusRipple, disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi, fullWidth = props.fullWidth, icon = props.icon, indicator = props.indicator, label = props.label, onChange = props.onChange, onClick = props.onClick, onFocus = props.onFocus, selected = props.selected, selectionFollowsFocus = props.selectionFollowsFocus, _props$textColor = props.textColor, textColor = _props$textColor === void 0 ? "inherit" : _props$textColor, value = props.value, _props$wrapped = props.wrapped, wrapped = _props$wrapped === void 0 ? false : _props$wrapped, other = _objectWithoutProperties(props, ["classes", "className", "disabled", "disableFocusRipple", "fullWidth", "icon", "indicator", "label", "onChange", "onClick", "onFocus", "selected", "selectionFollowsFocus", "textColor", "value", "wrapped"]);
  var handleClick = function handleClick2(event) {
    if (onChange) {
      onChange(event, value);
    }
    if (onClick) {
      onClick(event);
    }
  };
  var handleFocus = function handleFocus2(event) {
    if (selectionFollowsFocus && !selected && onChange) {
      onChange(event, value);
    }
    if (onFocus) {
      onFocus(event);
    }
  };
  return React.createElement(ButtonBase_default, _extends({
    focusRipple: !disableFocusRipple,
    className: clsx_m_default(classes.root, classes["textColor".concat(capitalize(textColor))], className, disabled && classes.disabled, selected && classes.selected, label && icon && classes.labelIcon, fullWidth && classes.fullWidth, wrapped && classes.wrapped),
    ref,
    role: "tab",
    "aria-selected": selected,
    disabled,
    onClick: handleClick,
    onFocus: handleFocus,
    tabIndex: selected ? 0 : -1
  }, other), React.createElement("span", {
    className: classes.wrapper
  }, icon, label), indicator);
});
true ? Tab.propTypes = {
  children: unsupportedProp,
  classes: import_prop_types.default.object.isRequired,
  className: import_prop_types.default.string,
  disabled: import_prop_types.default.bool,
  disableFocusRipple: import_prop_types.default.bool,
  disableRipple: import_prop_types.default.bool,
  fullWidth: import_prop_types.default.bool,
  icon: import_prop_types.default.node,
  indicator: import_prop_types.default.node,
  label: import_prop_types.default.node,
  onChange: import_prop_types.default.func,
  onClick: import_prop_types.default.func,
  onFocus: import_prop_types.default.func,
  selected: import_prop_types.default.bool,
  selectionFollowsFocus: import_prop_types.default.bool,
  textColor: import_prop_types.default.oneOf(["secondary", "primary", "inherit"]),
  value: import_prop_types.default.any,
  wrapped: import_prop_types.default.bool
} : void 0;
var Tab_default = withStyles_default(styles, {
  name: "MuiTab"
})(Tab);

export {
  Tab_default
};
//# sourceMappingURL=chunk-GB22B25F.js.map
